# -*- coding: utf-8 -*-
"""iqsize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q0oFr31xGRczJEAiVroWSc97H4PrSBnX

[ZHAW Link Kurs](https://github.com/toelt-llc/COURSE-zhaw-dlcourse-spring2019?tab=readme-ov-file)

Week 1 Intro Math & Python

[IQ Dataset](https://online.stat.psu.edu/stat462/node/129/#:~:text=This%20tells%20us%20that%2029.49,brain%20size%2C%20height%20and%20weight.)
"""

from google.colab import drive
import pandas as pd
drive.mount('/content/drive/', force_remount=True)
data = pd.read_csv("/content/drive/My Drive/COURSE-zhaw-dlcourse-spring2019/iqsize.txt", sep = '\t')

data.head()

data.size

import random
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from pandas.plotting import scatter_matrix

scatter_matrix(data, alpha = 0.5, figsize = (12, 12), diagonal = 'kde');

Y = data["PIQ"]

Y.head()

X = data.drop("PIQ", axis = 1)

X.head()

X["b"] = 1

X.head()

cols = X.columns.tolist()
cols = cols[-1:] + cols[:-1]
print(cols)

X = X[cols]

X.head()

part1 = np.linalg.inv(np.matmul(X.transpose() , X))
part2 = np.matmul(X.transpose(), Y)

p = np.matmul(part1, part2)

print(p)

Yhat = np.matmul(X, p)

plt.rcParams['font.family'] = 'DeJavu Serif'
plt.rcParams['font.serif'] = ['Times New Roman']
plt.rc('xtick', labelsize='x-small')
plt.rc('ytick', labelsize='x-small')

plt.tight_layout()

fig = plt.figure(figsize=(8, 5))
ax = fig.add_subplot(1, 1, 1)
ax.scatter(Y, Yhat, lw = 0.3)
ax.plot([Y.min(), Y.max()], [Y.min(), Y.max()], 'k--', lw = 3)
ax.set_xlabel('Measured Target Value')
ax.set_ylabel('Predicted Target Value')

# output
#p = [ 1.11353608e+02  2.06036680e+00 -2.73192916e+00  5.59937127e-04]
print(p)
# b, brainsize MRI, tallness in inches, weight in pounds
X2 = [1,100,70,227]
iq = np.matmul(X2, p)
iq2 = 1.11353608e+02 + (2.06036680e+00 * 100 ) + (-2.73192916e+00 * 70) + (5.59937127e-04 * 227)
print(iq)
print(iq2)

"""Example of linear regression in sklearn"""

from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
X = data.drop("PIQ", axis = 1)
X["b"] = 1

regr = linear_model.LinearRegression()
regr.fit(X.drop('b', axis = 1), Y)

y_pred = regr.predict(X.drop('b', axis = 1))

print('Coefficients: ', regr.coef_)
print('Intercept: ', regr.intercept_)

print('Coefficients from the matrix model: ', p[1:4])
print('Coefficients obtained with sklearn: ', regr.coef_)
print('Intercept obtained with sklearn: ', p[0])
print('Intercept obtained with sklearn: ', regr.intercept_)

fig = plt.figure(figsize=(8, 5))
ax = fig.add_subplot(1, 1, 1)
ax.scatter(Y, y_pred, lw = 0.3)
ax.plot([Y.min(), Y.max()], [Y.min(), Y.max()], 'k--', lw = 3)
ax.set_xlabel('Measured Target Value')
ax.set_ylabel('Predicted Target Value')

new_element = regr.intercept_
coeff_matrix = np.insert(regr.coef_, 0, new_element)
iq = np.matmul(X2, coeff_matrix)
print(iq)