# -*- coding: utf-8 -*-
"""boston_housing01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJhFgxW1v-MnXnTL2bEaZzcC6F5PEiVg

[Week1 - exercise 6](https://github.com/toelt-llc/COURSE-zhaw-dlcourse-spring2019/blob/master/Week%201%20-%20Mathematic%20introduction/Week%201%20-%20Linear%20Algebra%20and%20Python%20Introduction.ipynb)
"""

from google.colab import drive
import pandas as pd
import random
import math
import numpy as np
import matplotlib.pyplot as plt

from pandas.plotting import scatter_matrix
drive.mount('/content/drive/', force_remount=True)
column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
data = pd.read_csv('/content/drive/My Drive/COURSE-zhaw-dlcourse-spring2019/housing.csv', header=None, delimiter=r"\s+", names=column_names)

print(data.head(5))

# Dimension of the dataset
print(np.shape(data))

Y = data["B"]

Y.head()

X = data.drop("B", axis = 1)

X["b"] = 1

X.head()

cols = X.columns.tolist()
cols = cols[-1:] + cols[:-1]
print(cols)

X = X[cols]

X.head()

part1 = np.linalg.inv(np.matmul(X.transpose() , X))
part2 = np.matmul(X.transpose(), Y)

p = np.matmul(part1, part2)

print(p)

X2 = [1,  0.11747, 18.0	, 2.31	, 0	, 0.538	, 6.575, 	65.2, 	4.0900, 	1	, 296.0	, 15.3,  4.98	, 24.0]

Yhat = np.matmul(X2, p)
print(Yhat)

Y = data["CRIM"]
X = data["B"]

print(X.shape)
print(Y.shape)

coeff = data['CRIM'].corr(data['B'])
if coeff < 0 :
  print("negative Korrelation")
print(coeff)

if abs(coeff) >= 0.5:
  print("starker Zusammenhang")
if (abs(coeff) >= 0.3) and (abs(coeff) < 0.5):
  print("moderater Zusammenhang")
if (abs(coeff) < 0.3) and (abs(coeff) >= 0.1):
  print("schwacher Zusammenhang")

"""Medium correlation between B and CRIM"""

plt.rcParams['font.family'] = 'DeJavu Serif'
plt.rcParams['font.serif'] = ['Times New Roman']
plt.rc('xtick', labelsize='x-small')
plt.rc('ytick', labelsize='x-small')

plt.tight_layout()

fig = plt.figure(figsize=(8, 5))
ax = fig.add_subplot(1, 1, 1)
ax.scatter(X, Y, lw = 0.3)
ax.plot([Y.min(), Y.max()])

ax.set_xlabel('CRIM Measured Target Value')
ax.set_ylabel('B Predicted Target Value')